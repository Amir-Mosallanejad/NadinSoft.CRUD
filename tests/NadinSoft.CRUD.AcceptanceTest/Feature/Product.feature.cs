// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NadinSoft.CRUD.AcceptanceTest.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FullProductLifecycleFeature : object, Xunit.IClassFixture<FullProductLifecycleFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Product.feature"
#line hidden
        
        public FullProductLifecycleFeature(FullProductLifecycleFeature.FixtureData fixtureData, NadinSoft_CRUD_AcceptanceTest_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature", "Full Product Lifecycle", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User registers, logs in, creates, updates, deletes a product, and sees empty prod" +
            "uct list")]
        [Xunit.TraitAttribute("FeatureTitle", "Full Product Lifecycle")]
        [Xunit.TraitAttribute("Description", "User registers, logs in, creates, updates, deletes a product, and sees empty prod" +
            "uct list")]
        public void UserRegistersLogsInCreatesUpdatesDeletesAProductAndSeesEmptyProductList()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User registers, logs in, creates, updates, deletes a product, and sees empty prod" +
                    "uct list", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "ConfirmPassword"});
                table1.AddRow(new string[] {
                            "user@test.com",
                            "Pa$$word123",
                            "Pa$$word123"});
#line 4
        testRunner.Given("I register a new user with:", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table2.AddRow(new string[] {
                            "user@test.com",
                            "Pa$$word123"});
#line 8
        testRunner.When("I login using:", ((string)(null)), table2, "When ");
#line hidden
#line 12
        testRunner.Then("I should receive a JWT token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "ProduceDate",
                            "ManufacturePhone",
                            "ManufactureEmail",
                            "IsAvailable"});
                table3.AddRow(new string[] {
                            "Apple Juice",
                            "2024-01-01T00:00:00Z",
                            "+989123456789",
                            "juice@factory.com",
                            "true"});
#line 14
        testRunner.When("I use the token to create a product with:", ((string)(null)), table3, "When ");
#line hidden
#line 18
        testRunner.Then("the product should be \"created\" successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
        testRunner.When("I retrieve the product list and extract the first product ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "ProduceDate",
                            "ManufacturePhone",
                            "ManufactureEmail",
                            "IsAvailable"});
                table4.AddRow(new string[] {
                            "Apple Juice MAX",
                            "2024-01-01T00:00:00Z",
                            "+989123456789",
                            "juice@factory.com",
                            "false"});
#line 22
        testRunner.When("I update the product with:", ((string)(null)), table4, "When ");
#line hidden
#line 26
        testRunner.Then("the product should be \"updated\" successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
        testRunner.When("I delete the product", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
        testRunner.Then("the product should be \"deleted\" successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
        testRunner.When("I retrieve the product list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
        testRunner.Then("the response should contain an empty list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FullProductLifecycleFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FullProductLifecycleFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
